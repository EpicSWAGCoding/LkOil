generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_URL_URL")
  directUrl  = env("POSTGRES_URL_URL_NON_POOLING")
}

model User {
  id                  Int                    @id @default(autoincrement())
  login               String                 @unique
  password            String
  username            String                 @unique
  isAdmin             Boolean                @default(false)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt

  contractorBindings  UserContractorBinding[]
}

model Contractor {
  id                  Int                    @id @default(autoincrement())
  name                String
  inn                 String                 @unique
  phone               String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt

  accounts            Account[]
  balances            Balance[]
  cards               Card[]
  transactions        Transaction[]
  refills             Refill[]
  contractorBindings  UserContractorBinding[]
}

model UserContractorBinding {
  id             Int         @id @default(autoincrement())
  userId         Int
  contractorId   Int
  accountId      Int
  cardId         Int
  isAdmin        Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user           User        @relation(fields: [userId], references: [id])
  contractor     Contractor  @relation(fields: [contractorId], references: [id])
  account        Account     @relation(fields: [accountId], references: [id])
  card           Card        @relation(fields: [cardId], references: [id])
}

model Account {
  id                  Int                     @id @default(autoincrement())
  contractorId        Int
  accountNumber       String                  @unique
  segment             String?
  contract            String?
  currencyType        String
  accountType         String
  validFrom           DateTime?
  validTo             DateTime?
  balance             Float
  isBlocked           Boolean                 @default(false)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt

  contractor          Contractor              @relation(fields: [contractorId], references: [id])
  balances            Balance[]
  cards               Card[]
  transactions        Transaction[]
  refills             Refill[]
  userContractorBindings UserContractorBinding[]
}

model Balance {
  id                  Int          @id @default(autoincrement())
  contractorId        Int
  accountNumber       String
  balance             Float
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  contractor          Contractor   @relation(fields: [contractorId], references: [id])
  account             Account      @relation(fields: [accountNumber], references: [accountNumber])
}

model Card {
  id                  Int                     @id @default(autoincrement())
  contractorId        Int
  accountNumber       String
  cardNumber          String                  @unique
  segment             String?
  limit               Float
  currencyType        String
  balance             Float
  isBlocked           Boolean                 @default(false)
  validFrom           DateTime?
  validTo             DateTime?
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt

  contractor          Contractor              @relation(fields: [contractorId], references: [id])
  account             Account                 @relation(fields: [accountNumber], references: [accountNumber])
  limits              Limit[]
  transactions        Transaction[]
  userContractorBindings UserContractorBinding[]
}

model Transaction {
  id                  Int          @id @default(autoincrement())
  contractorId        Int
  accountNumber       String
  cardId              Int
  transactionDate     DateTime
  gasStation          String
  product             String
  quantity            Float
  price               Float
  total               Float
  discount            Float
  finalTotal          Float
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  contractor          Contractor   @relation(fields: [contractorId], references: [id])
  account             Account      @relation(fields: [accountNumber], references: [accountNumber])
  card                Card         @relation(fields: [cardId], references: [id])
}

model Refill {
  id                  Int          @id @default(autoincrement())
  contractorId        Int
  accountNumber       String
  refillDate          DateTime
  segment             String?
  amount              Float
  uploadDate          DateTime     @default(now())
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  contractor          Contractor   @relation(fields: [contractorId], references: [id])
  account             Account      @relation(fields: [accountNumber], references: [accountNumber])
}

model Limit {
  id                  Int          @id @default(autoincrement())
  cardId              Int
  fuelType            String
  limit               Float
  driverName          String
  carNumber           String
  pinCode             String
  isBlocked           Boolean      @default(false)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  card                Card         @relation(fields: [cardId], references: [id])
}
