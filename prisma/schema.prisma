generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        Int      @id @default(autoincrement())
  login     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contractorBindings UserContractorBinding[]
}

model Contractor {
  id        Int      @id @default(autoincrement())
  name      String
  inn       String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts  Account[]
  balances  Balance[]
  cards     Card[]
  transactions Transaction[]
  refills   Refill[]
  contractorBindings UserContractorBinding[]
}

model UserContractorBinding {
  id           Int      @id @default(autoincrement())
  userId       Int
  contractorId Int
  accountNumber String
  cardNumber   String
  isAdmin      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User      @relation(fields: [userId], references: [id])
  contractor   Contractor @relation(fields: [contractorId], references: [id])
}

model Account {
  id          Int      @id @default(autoincrement())
  contractor  Contractor @relation(fields: [contractorId], references: [id])
  contractorId Int
  accountNumber String
  segment     String?
  contract    String?
  currencyType String
  accountType String
  validFrom   DateTime?
  validTo     DateTime?
  balance     Float
  isBlocked   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Balance {
  id          Int      @id @default(autoincrement())
  contractor  Contractor @relation(fields: [contractorId], references: [id])
  contractorId Int
  accountNumber String
  balance     Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Card {
  id          Int      @id @default(autoincrement())
  contractor  Contractor @relation(fields: [contractorId], references: [id])
  contractorId Int
  accountNumber String
  cardNumber  String
  segment     String?
  limit       Float
  currencyType String
  balance     Float
  isBlocked   Boolean   @default(false)
  validFrom   DateTime?
  validTo     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  limits      Limit[]
}

model Transaction {
  id          Int      @id @default(autoincrement())
  contractor  Contractor @relation(fields: [contractorId], references: [id])
  contractorId Int
  accountNumber String
  cardNumber  String
  transactionDate DateTime
  gasStation  String
  product     String
  quantity    Float
  price       Float
  total       Float
  discount    Float
  finalTotal  Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Refill {
  id          Int      @id @default(autoincrement())
  contractor  Contractor @relation(fields: [contractorId], references: [id])
  contractorId Int
  accountNumber String
  refillDate  DateTime
  segment     String?
  amount      Float
  uploadDate  DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Limit {
  id          Int      @id @default(autoincrement())
  card        Card     @relation(fields: [cardId], references: [id])
  cardId      Int
  fuelType    String
  limit       Float
  driverName  String
  carNumber   String
  pinCode     String
  isBlocked   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}